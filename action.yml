name: List Issues
description: Lists issues
branding:
  icon: list
  color: blue

inputs:
  token:
    description: Personal Access Token
    required: true 
  repository:
    description: GitHub Repository (username/repo-name)
    required: true
    default: ${{ github.repository }}
  titles:
    description: Issue Titles to select
    required: true
  allow-suffix:
    description: Include any issue with a title that begins with one of the values of the titles input
    required: true
    default: 'false'
  state:
    description: Issue state to match (open, closed or all)
    required: true
    default: open

outputs:
  all:
    description: Numbers of all queued issues
    value: ${{ steps.list.outputs.all }}
  next:
    description: Number of next issue
    value: ${{ steps.list.outputs.next }}
  next-title:
    description: Title of next issue
    value: ${{ steps.list.outputs.next-title }}
  has-next:
    description: Indicates whether or not there is a next issue
    value: ${{ steps.list.outputs.has-next }}
  count:
    description: Number of queued issues
    value: ${{ steps.list.outputs.count }}

runs:
  using: composite
  steps:

    - shell: bash
      id: list
      env:
        TITLES: ${{ inputs.titles }}
        ALLOW_SUFFIX: ${{ inputs.allow-suffix }}
        STATE: ${{ inputs.state }}
        REPOSITORY: ${{ inputs.repository }}
        GITHUB_TOKEN: ${{ inputs.token }}
      run: |
        eval $(
          gh api \
            -H "Accept: application/vnd.github+json" \
            "/repos/$REPOSITORY/issues?state=$STATE" \
            --paginate \
            --jq '.[] | {number,title,updated_at}' \
          | jq \
              -r \
              -s \
              '
              [
                env.TITLES
                | split("\n")[]
                | select(. != "")
              ] as $titles
              | (
                env.ALLOW_SUFFIX
                | fromjson
              ) as $allow_suffix
              | [
                  .[]
                  | if $allow_suffix then (
                      select(.title as $t | any($titles[]; . as $title | $t | startswith($title)))
                    ) else (
                      select(.title as $t | any($titles[]; . == $t))
                    ) end
                ]
              | sort_by(.updated_at | fromdate)
              | map(.number) as $all
              | length as $count
              | ($count > 0) as $has_next
              | (if $has_next then .[0].number else -1 end) as $next
              | (if $has_next then .[0].title else "" end) as $next_title
              | "echo -e \"" +
                "::set-output name=all::\($all | tostring)\\n" +
                "::set-output name=has-next::\($has_next)\\n" +
                "::set-output name=next::\($next)\\n" +
                "::set-output name=next-title::\($next_title)\\n" +
                "::set-output name=count::\($count)\""
              '
          )
