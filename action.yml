name: List Queued Issues
description: Lists all open issues with one of the specified titles
branding:
  icon: list
  color: blue

inputs:
  token:
    description: Personal Access Token
    required: true 
  repository:
    description: GitHub Repository (username/repo-name)
    required: true
    default: ${{ github.repository }}
  titles:
    description: Issue Titles to select
    required: true

outputs:
  all:
    description: Numbers of all queued issues
    value: ${{ steps.list.outputs.all }}
  next:
    description: Number of next issue
    value: ${{ steps.list.outputs.next }}
  has-next:
    description: Indicates whether or not there is a next issue
    value: ${{ steps.list.outputs.has-next }}
  count:
    description: Number of queued issues
    value: ${{ steps.list.outputs.count }}

runs:
  using: composite
  steps:

    - shell: bash
      id: list
      env:
        TITLES: ${{ inputs.titles }}
        REPOSITORY: ${{ inputs.repository }}
        GITHUB_TOKEN: ${{ inputs.token }}
      run: |
        eval $(
          gh api \
            -H "Accept: application/vnd.github+json" \
            "/repos/$REPOSITORY/issues" \
            --paginate \
            --jq '.[] | {number,title,updated_at}' \
          | jq \
              -r \
              -s \
              '
              [
                env.TITLES
                | split("\n")[]
                | select(. != "")
              ] as $titles
              | [.[] | select(.title as $title | any($titles[]; . == $title))]
              | sort_by(.updated_at | fromdate)
              | map(.number) as $all
              | length as $count
              | ($count > 0) as $has_next
              | (if $has_next then .[0].number else -1 end) as $next
              | "echo -e \"" +
                "::set-output name=all::\($all | tostring)\\n" +
                "::set-output name=has-next::\($has_next)\\n" +
                "::set-output name=next::\($next)\\n" +
                "::set-output name=count::\($count)\""
              '
          )